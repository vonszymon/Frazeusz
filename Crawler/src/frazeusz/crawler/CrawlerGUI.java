package frazeusz.crawler;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class CrawlerGUI {
    private JPanel panelRoot;
    private JSpinner spinnerPages;
    private JSpinner spinnerDepth;
    private JComboBox comboBoxBytesMultiplier;
    private JSpinner spinnerBytes;
    private JTable tableDomains;

    private DefaultTableModel tableDomainsModel;

    public CrawlerGUI() {

        this.tableDomainsModel = new DefaultTableModel(0, 1);
        this.tableDomainsModel.addRow(new Object[]{""});

        this.tableDomains.setModel(this.tableDomainsModel);

        this.tableDomains.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                domainsTableModified();
            }
        });

        tableDomains.getDefaultEditor(String.class).addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                domainsTableModified();
            }

            @Override
            public void editingCanceled(ChangeEvent e) {

            }
        });

        this.tableDomains.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    }

    private void domainsTableModified() {
        int rows = tableDomainsModel.getRowCount();

        boolean modified = false;

        if (rows == 0) {
            tableDomainsModel.addRow(new Object[]{""});
            modified = true;
        } else {
            for (int i = 0; i < rows - 1; i++) {
                if (tableDomainsModel.getValueAt(i, 0).equals("")) {
                    tableDomainsModel.removeRow(i);
                    rows--;
                    i--;
                    modified = true;
                }
            }

            if (!tableDomainsModel.getValueAt(rows - 1, 0).equals("")) {
                tableDomainsModel.addRow(new Object[]{""});
                modified = true;
            }
        }

        if (modified) {
            tableDomainsModel.fireTableStructureChanged();
        }
    }

    private int getSelectedMultiplier(JComboBox box) {
        int selected = box.getSelectedIndex();

        return 1 << (10 * selected);
    }

    public CrawlerConfigurator getConfigurator() {
        CrawlerConfigurator config = new CrawlerConfigurator();

        config.setPages((Integer) spinnerPages.getValue());
        config.setDepth((Integer) spinnerDepth.getValue());
        config.setBytes((Integer) spinnerBytes.getValue() * getSelectedMultiplier(comboBoxBytesMultiplier));

        int rows = tableDomainsModel.getRowCount();
        for (int i = 0; i < rows; i++) {
            String value = (String) tableDomainsModel.getValueAt(i, 0);
            if (!value.equals("")) {
                config.addDomain(value);
            }
        }

        return config;
    }

    public JPanel getRootPanel() {
        return panelRoot;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelRoot = new JPanel();
        panelRoot.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setResizeWeight(1.0);
        panelRoot.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(panel1);
        final JLabel label1 = new JLabel();
        label1.setText("Ilosc stron do przeszukania");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Maksymalna glebokosc");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Maksymalna ilosc danych");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("(0 - bez ograniczen)");
        panel2.add(label4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBoxBytesMultiplier = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("B");
        defaultComboBoxModel1.addElement("kB");
        defaultComboBoxModel1.addElement("MB");
        defaultComboBoxModel1.addElement("GB");
        defaultComboBoxModel1.addElement("TB");
        comboBoxBytesMultiplier.setModel(defaultComboBoxModel1);
        comboBoxBytesMultiplier.setRequestFocusEnabled(true);
        panel2.add(comboBoxBytesMultiplier, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerBytes = new JSpinner();
        panel2.add(spinnerBytes, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerPages = new JSpinner();
        panel1.add(spinnerPages, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerDepth = new JSpinner();
        panel1.add(spinnerDepth, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setLeftComponent(panel3);
        tableDomains = new JTable();
        panel3.add(tableDomains, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(205, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelRoot;
    }
}
